[{"name": "app.py", "content": "import matplotlib.pyplot as plt\n\n# Import polars to load Parquet\nimport polars as pl\nfrom shiny import App, render, ui\n\ndf = pl.read_parquet(\"app-parquet/data.parquet\")\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(ui.input_slider(\"n\", \"N\", min=0, max=100, value=20)),\n    ui.output_plot(\"histogram\"),\n    title=\"Hello, PyData Berlin!\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.plot\n    def histogram():\n        # Use data frame instead of generated values\n        data = df[\"values\"].to_numpy()\n        plt.hist(data, bins=input.n(), density=True)\n\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "data.parquet", "content": "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+TnoaGZGwh/bqgu6Ox4eCyFtQ6xD4PXpppgiT3P/HmIGCfCHwL1mpYNESXa8HoKlabZU4V+fKBlHiVwO1hA0q2Axy+/HKoCXWgtc3iLKORNi4DPX7Lg0uX23ahLqx1PttbcH7ZfYJPfOKLolKWk/J7GJyiZxebjoTWexSd9noSdH2qzoXqQ/yjwnlac54H0AilU9jcGbJiPaeFfzSwFGqAavZzHDlCOoXmNFeX7uSLy3TYwkCzHD1yqMZNEAfe5tnDBr8zfzmGkMTJPTxrd0mFMAFwt/m6rtRBagdfmoSFYKWASnJSUtke7CXKac1fTbmvGxV7LKF2ZCPvvQ+5R6EOXgLaBZoUWUPHYzG2W049s/hW2MqSnefRBFssiMBR+LHOKBFcbNt3p/ShZ2fO4dDPM5aUN6OrOLSqEOuHMDs+wo9To8TfYlyclS8fGjBTUzLpbvxgqxSNBUe9tDDQ0QqNG+e2VID6k5vHv4x9UF1+JgJ1ErGtnTk1UIClRbLPycNRrUQyf62kMR2WW3/sXJ47zC5uB35cylnc79eiYPi8iT2L+cPxCZ7AE9zOZFARp4QL99oppsmdzyWZRLtEfM0bmzNU4bYwxe/gAUKgOUx2UiWKqdDVAPBiJow+4mXh7RBadHKnfv9g5DjgYHvOaBN2JVSNfrG3ZDELiYuvczRluPnNfnKSpmKbJQ787WtZ2wefJ5RqxLW8K77aQYloAW6HbRjVMoEZjTtLFaXoyBXwvh+UBfaDrd4kgSUifM59QTC2p8JB6cIfHM7EaD1zIgZDMt28+3zasB3xGfS+0i0KlIOp31ROHHC/S1zQsQYJ2TpxXPtFSpWbqc5gDtVoIgt0e5ojir6tN/AQAVChklAAYZGAZ2YWx1ZXMVDBbqBha2NxakNCYIPDYAKAicnhgppa5hQBgIA/58SgxGR0AAABkRAhkYCAP+fEoMRkdAGRgInJ4YKaWuYUAVABkWAAAZHBYIFaQ0FgAAABUCGSxIBHJvb3QVAgAVCiUCGAZ2YWx1ZXMAFuoGGRwZHCasNBwVChklAAYZGAZ2YWx1ZXMVDBbqBha2NxakNCYIPDYAKAicnhgppa5hQBgIA/58SgxGR0AAABbUNRUWFpY1FT4AFrY3FuoGJggWpDQUAAAZHBgMQVJST1c6c2NoZW1hGKQBLy8vLy8zTUFBQUFFQUFBQTh2Ly8veFFBQUFBRUFBRUFBQUFLQUFzQUNBQUtBQVFBK1AvLy93d0FBQUFJQUFnQUFBQUVBQUVBQUFBRUFBQUE3UC8vL3pBQUFBQWdBQUFBR0FBQUFBRURBQUFRQUJJQUJBQVFBQkVBQ0FBQUFBd0FBQUFBQVByLy8vOENBQVlBQmdBRUFBWUFBQUIyWVd4MVpYTUEAGAZQb2xhcnMZHBwAAAA5AQAAUEFSMQ==", "type": "binary"}]